trigger:
  branches:
    include:
    - refs/heads/main
    - refs/heads/release/*
    - refs/heads/feature/*
  batch: True

resources:
- repo: self

variables:
# Group variables
- group: CodeBuildDeploy-Global

# Service Connections
- name: ARM_Service_Connection_Prod
  value: codebuilddeploy-terraform
- name: ARM_Service_Connection_NonProd
  value: codebuilddeploy-terraform-non-prod

# Branch Variables
- name: isMain
  value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
- name: isRelease
  value: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')]

# Agent VM image name
- name: vmImageName
  value: 'ubuntu-latest'

# Short Sha
- template: shortsha-variable.yml

# Versioning
- template: versioning-variables.yml
  parameters:
    shortsha: ${{ variables['Build.SourceVersion.Short'] }}

# Terraform Storage
- name: tfstate_rg_name_nonprod
  value: 'tfstate-codebuilddeploy-rg'
- name: tfstate_storage_account_name_nonprod
  value: 'tfstatecbdnpd'
- name: tfstate_blob_name_nonprod
  value: 'tfstate-codebuilddeploy-blobc'

name: $[variables['build.number']]

stages:
- stage: Build_Umbrella
  displayName: Build Umbrella
  jobs:
  - job: Init_Vars
    displayName: Init Vars
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self
      displayName: 'Checkout Repo'

    - powershell: |
        $shortsha = "$(Build.SourceVersion)".Substring(0, 7)
        Write-Host "##vso[task.setvariable variable=ShortSha;isOutput=true]$shortsha"
      workingDirectory: $(Build.SourcesDirectory)
      name: ShortShaTask
      displayName: Generate ShortSha

    - powershell: |
        Write-Host "##vso[task.setvariable variable=version.informational]$(version.assembly)-$(ShortShaTask.ShortSha)"
        Write-Host "##vso[build.updatebuildnumber]$(version.assembly)-$(ShortShaTask.ShortSha)"
      workingDirectory: $(Build.SourcesDirectory)
      condition: and(ne(variables.isMain, 'True'), ne(variables.isRelease, 'True'))
      name: UpdateBuildNumber
      displayName: Update Build Number

    - bash: |
        echo "isMain = $(isMain)"
        echo "isRelease = $(isRelease)"
        echo "SourceVersion = $(Build.SourceVersion)"
        echo "ShortSha = $(ShortShaTask.ShortSha)"
        echo "Build.SourceVersion.PreparedForSplit = $(Build.SourceVersion.PreparedForSplit)"
        echo "Build.SourceVersion.Short = $(Build.SourceVersion.Short)"
        echo "Build Number = $(build.number)"
        echo "Version Assembly = $(version.assembly)"
        echo "Version File = $(version.file)"
        echo "Version Informational = $(version.informational)"
        echo "Version Major = $(major)"
        echo "Version Minor = $(minor)"
        echo "Version Patch = $(patch)"
      displayName: Output Version

  - job: Tag_Version
    displayName: Tag Version
    pool:
      vmImage: $(vmImageName)
    dependsOn:
      - Init_Vars
    condition: and(or(eq(variables.isMain, 'True'), eq(variables.isRelease, 'True')), succeeded())
    steps:
    - checkout: self
      displayName: 'Checkout Repo'
      persistCredentials: true

    - bash: |
        echo "Version Informational = $(version.informational)"
      displayName: Output Version

    - script: |
        git tag $(version.informational)
        git push origin $(version.informational)
      workingDirectory: $(Build.SourcesDirectory)
      displayName: Tag Version in Git

- stage: Provision_NonProd
  displayName: Provision NonProd Infra
  dependsOn:
    - Build_Umbrella
  variables:
  - name: ShortSha
    value: $[ stageDependencies.Build_Umbrella.Init_Vars.outputs['ShortShaTask.ShortSha'] ]

  jobs:
  - job: Init_TFState
    displayName: Init NonProd TFState
    pool:
      vmImage: $(vmImageName)
    steps:
    - template: create-tfstate-storage.yml
      parameters:
        location: 'uksouth'
        service_connection: $(ARM_Service_Connection_NonProd)
        resource_group_name: $(tfstate_rg_name_nonprod)
        storage_account_name: $(tfstate_storage_account_name_nonprod)
        container_blob_name: $(tfstate_blob_name_nonprod)

  - deployment: Provision_Environment
    displayName: Provision NonProd Environment
    environment: NonProd
    pool:
      vmImage: $(vmImageName)
    dependsOn:
      - Init_TFState
    strategy:
      runOnce:
        deploy:
          steps:
          - template: environment-terraform.yml
            parameters: 
              service_connection: '$(ARM_Service_Connection_NonProd)'
              environment: 'nonprod'
              tfstate_rg_name: $(tfstate_rg_name_nonprod)
              tfstate_storage_account_name: $(tfstate_storage_account_name_nonprod)
              tfstate_blob_name: $(tfstate_blob_name_nonprod)

  - ${{ if and(ne(variables['Build.SourceBranch'], 'refs/heads/main'), ne(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), 'True')) }}:
    - deployment: Provision_Dyn_Spoke
      displayName: Provision NonProd Dyn Spoke
      environment: NonProd-Dyn
      pool:
        vmImage: $(vmImageName)
      dependsOn:
        - Provision_Environment
      strategy:
        runOnce:
          deploy:
            steps:
            - template: environment-spoke-terraform.yml
              parameters: 
                service_connection: '$(ARM_Service_Connection_NonProd)'
                environment: 'nonprod'
                environment_spoke: 'dyn'
                environment_spoke_postfix: '-$(ShortSha)'
                tfstate_rg_name: $(tfstate_rg_name_nonprod)
                tfstate_storage_account_name: $(tfstate_storage_account_name_nonprod)
                tfstate_blob_name: $(tfstate_blob_name_nonprod)

  - ${{ if or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')) }}:
    - deployment: Provision_Dev_Spoke
      displayName: Provision NonProd Dev Spoke
      environment: NonProd-Dev
      pool:
        vmImage: $(vmImageName)
      dependsOn:
        - Provision_Environment
      strategy:
        runOnce:
          deploy:
            steps:
            - template: environment-spoke-terraform.yml
              parameters: 
                service_connection: '$(ARM_Service_Connection_NonProd)'
                environment: 'nonprod'
                environment_spoke: 'dev'
                tfstate_rg_name: $(tfstate_rg_name_nonprod)
                tfstate_storage_account_name: $(tfstate_storage_account_name_nonprod)
                tfstate_blob_name: $(tfstate_blob_name_nonprod)